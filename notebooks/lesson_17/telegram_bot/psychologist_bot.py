import os
from dotenv import load_dotenv   
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

load_dotenv('.env')
MISTRAL_API_KEY = os.environ["MISTRAL_API_KEY"]
TOKEN = os.environ["BOT_TOKEN"]

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
if not os.path.exists("appointments"):
    os.makedirs("appointments")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
MAIN_MENU = {
    "ru": {
        "greeting": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É.",
        "buttons": [
            {"text": "–û –ø—Å–∏—Ö–æ–ª–æ–≥–µ", "callback_data": "about"},
            {"text": "–£—Å–ª—É–≥–∏", "callback_data": "services"},
            {"text": "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "callback_data": "book"},
            {"text": "–ö–æ–Ω—Ç–∞–∫—Ç—ã", "callback_data": "contacts"},
        ],
    },
}

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Å–∏—Ö–æ–ª–æ–≥–µ
ABOUT_PSYCHOLOGIST = {
    "ru": (
        "üë©‚Äçüíº –û –ø—Å–∏—Ö–æ–ª–æ–≥–µ:\n"
        "–ò–º—è: –ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞\n"
        "–û–ø—ã—Ç: 10 –ª–µ—Ç\n"
        "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: —Å—Ç—Ä–µ—Å—Å, —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å, –æ—Ç–Ω–æ—à–µ–Ω–∏—è.\n"
        "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: –ú–æ—Å–∫–æ–≤—Å–∫–∏–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç."
    ),
}

# –£—Å–ª—É–≥–∏
SERVICES = {
    "ru": (
        "üìã –ù–∞—à–∏ —É—Å–ª—É–≥–∏:\n"
        "1. –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ‚Äî 2000 —Ä—É–±–ª–µ–π\n"
        "2. –ü–∞—Ä–∞-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ‚Äî 3000 —Ä—É–±–ª–µ–π\n"
        "3. –ì—Ä—É–ø–ø–æ–≤–∞—è —Ç–µ—Ä–∞–ø–∏—è ‚Äî 1500 —Ä—É–±–ª–µ–π"
    ),
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(button["text"], callback_data=button["callback_data"])]
        for button in MAIN_MENU["ru"]["buttons"]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(MAIN_MENU["ru"]["greeting"], reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "about":
        await query.edit_message_text(text=ABOUT_PSYCHOLOGIST["ru"])
    elif query.data == "services":
        await query.edit_message_text(text=SERVICES["ru"])
    elif query.data == "book":
        await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è:")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å inline-–∫–Ω–æ–ø–∫–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏
    elif query.data == "contacts":
        await query.edit_message_text(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n–¢–µ–ª–µ—Ñ–æ–Ω: +7-XXX-XXX-XXXX\nEmail: example@example.com")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")

def main():
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = ApplicationBuilder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(menu_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_message))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()